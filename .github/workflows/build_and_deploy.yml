name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  NODE_VERSION: '16.x'
  FRONTEND_OUTPUT_LOCATION: './apps/web/out'
  BACKEND_OUTPUT_LOCATION: './apps/server/dist'
  DISABLE_ERD: true

jobs:
  cancel-existing:
    runs-on: ubuntu-latest
    name: Cancel Previous Pipeline Runs
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  install:
    needs: cancel-existing
    runs-on: ubuntu-latest
    name: 'NPM Install'
    steps:
      - uses: actions/checkout@v3
      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Node build
        run: npm ci

  lint:
    needs: install
    name: 'Lint source code'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: 'sqlserver://' # prisma format needs a value
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        run: npm run lint

  test:
    needs: install
    name: 'Run tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Unit Test
        run: npm test

  build:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    name: Build
    env:
      API_BASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_BASE_URL || secrets.QA_API_BASE_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build
        run: |
          npm run build
          echo "Built frontend"
          find ${{ env.FRONTEND_OUTPUT_LOCATION }} -type f
          echo "Built backend"
          find ${{ env.BACKEND_OUTPUT_LOCATION }} -type f
      - name: Cache Frontend
        uses: actions/cache@v3
        with:
          path: ${{ env.FRONTEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-frontend-${{ github.sha }}
      - name: Cache Backend
        uses: actions/cache@v3
        with:
          path: ${{ env.BACKEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-backend-${{ github.sha }}

  deploy-frontend:
    name: Frontend Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      frontend_url: ${{ steps.deploy.outputs.static_web_app_url }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Load frontend
        uses: actions/cache@v3
        with:
          path: ${{ env.FRONTEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-frontend-${{ github.sha }}
      - name: Deploy frontend
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_HAPPY_BAY_0CAAA7303 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          skip_app_build: true
          app_location: ${{ env.FRONTEND_OUTPUT_LOCATION }}

  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      DATABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_QA }}
      DATABASE_PACKAGE_PATH: './packages/database'
    steps:
      - uses: actions/checkout@v2
      - name: Get changed files in the migrations folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: "**/migrations/**"
          base_sha: ${{ github.event.before }}
      - name: Load node_modules
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run database migration
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: cd ${{ env.DATABASE_PACKAGE_PATH }} && npm run deploy

  deploy-backend:
    name: Backend Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './apps/server'
      BACKEND_SLOT: ${{ github.ref == 'refs/heads/main' && 'Production' || 'qa' }}
      BACKEND_PUBLISH_PROFILE: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_BACKEND_PUBLISH_PROFILE || secrets.QA_BACKEND_PUBLISH_PROFILE }}
      DATABASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_QA }}
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      FUNCTION_APP_NAME: 'BjssCompetitiveStandingBackend'
    steps:
      - uses: actions/checkout@v3
      - name: Load backend
        uses: actions/cache@v3
        with:
          path: ${{ env.BACKEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-backend-${{ github.sha }}
      - name: Deploy azure functions
        uses: Azure/functions-action@v1
        id: function-app-deploy
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          slot-name: ${{ env.BACKEND_SLOT }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ env.BACKEND_PUBLISH_PROFILE }}
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Add Function appsettings for non-production slot
        if: env.BACKEND_SLOT != 'Production'
        run: az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --slot ${{ env.BACKEND_SLOT }} --resource-group ${{ env.RESOURCE_GROUP }} --slot-settings DATABASE_URL="${{ env.DATABASE_URL }}"
      - name: Add Function appsettings for Production
        if: env.BACKEND_SLOT == 'Production'
        run: az functionapp config appsettings set --name ${{ env.FUNCTION_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --slot-settings DATABASE_URL="${{ env.DATABASE_URL }}"

  smoke:
    name: 'Smoke tests'
    runs-on: ubuntu-latest
    needs: 
      - deploy-backend
      - deploy-frontend
      - migrate-database
    env:
      API_BASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_BASE_URL || secrets.QA_API_BASE_URL }}
    steps:
      - name: Backend smoke test
        run: curl '${{ env.API_BASE_URL }}/users/jjp' -w "%{http_code}" -f -s -S -o /dev/null
      - name: Frontend smoke test
        run:  curl ${{ needs.deploy-frontend.outputs.frontend_url }} -w "%{http_code}" -f -s -S -o /dev/null
        
    