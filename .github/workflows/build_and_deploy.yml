name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  NODE_VERSION: '16.x'
  FRONTEND_OUTPUT_LOCATION: './apps/web/out'
  BACKEND_OUTPUT_LOCATION: './apps/server/dist'

jobs:
  cancel-existing:
    runs-on: ubuntu-latest
    name: Cancel Previous Pipeline Runs
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

  install:
    needs: cancel-existing
    runs-on: ubuntu-latest
    name: 'NPM Install'
    steps:
      - uses: actions/checkout@v3
      - name: Cache Node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Node build
        run: npm ci

  lint:
    needs: install
    name: 'Lint source code'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        run: npm run lint

  test:
    needs: install
    name: 'Run tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Unit Test
        run: npm test

  build:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    name: Build
    env:
      API_BASE_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_BASE_URL || secrets.QA_API_BASE_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Build
        run: |
          npm run build
          echo "Built frontend"
          find ${{ env.FRONTEND_OUTPUT_LOCATION }}
          echo "Built backend"
          find ${{ env.BACKEND_OUTPUT_LOCATION }}
      - name: Cache Frontend
        uses: actions/cache@v3
        with:
          path: ${{ env.FRONTEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-frontend-${{ github.sha }}
      - name: Cache Backend
        uses: actions/cache@v3
        with:
          path: ${{ env.BACKEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-backend-${{ github.sha }}

  deploy-frontend:
    name: Frontend Deploy
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Load frontend
        uses: actions/cache@v3
        with:
          path: ${{ env.FRONTEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-frontend-${{ github.sha }}
      - name: Deploy frontend
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_HAPPY_BAY_0CAAA7303 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          skip_app_build: true
          app_location: ${{ env.FRONTEND_OUTPUT_LOCATION }}

  migrate-database:
    name: Datbase Migration
    runs-on: ubuntu-latest
    # TODO: Only deploy to production when in main (TODO: Configure to deploy test for some branches, prod when on main)
    needs:
      - build
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './apps/server'
    steps:
      - uses: actions/checkout@v2
      - name: Load node_modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run production migration
        run: cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} && npm run migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}

  deploy-backend:
    name: Backend Deploy
    runs-on: ubuntu-latest
    needs:
      - build
      - migrate-database
    env:
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './apps/server'
      BACKEND_SLOT: ${{ github.ref == 'refs/heads/main' && 'Production' || 'qa' }}
      BACKEND_PUBLISH_PROFILE: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_BACKEND_PUBLISH_PROFILE || secrets.QA_BACKEND_PUBLISH_PROFILE }}
    steps:
      - uses: actions/checkout@v3
      - name: Load backend
        uses: actions/cache@v3
        with:
          path: ${{ env.BACKEND_OUTPUT_LOCATION }}
          key: ${{ runner.os }}-build-cache-backend-${{ github.sha }}
      - name: Deploy azure functions
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: 'BjssCompetitiveStandingBackend'
          slot-name: ${{ env.BACKEND_SLOT }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: ${{ env.BACKEND_PUBLISH_PROFILE }}
